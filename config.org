#+STARTUP: overview
#+TITLE: Sean's Emacs Settings
#+CREATOR: Sean Bergstedt

* FRAME SETTINGS
** Stop showing the welcome screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Deactivate bell
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
** Make sure line numbers appear in all text editing buffers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC
** Setup starting frame dimensions
#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist '(
            (top . 40) (left . 100)
            (width . 128) (height . 50)
            )
      )
#+END_SRC
* CUSTOM VARIABLES
** if you edit it by hand, you could mess it up, so be careful
#+BEGIN_SRC emacs-lisp
;; --------------------------------------------------
;; Setup custom variables
;; --------------------------------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(custom-enabled-themes (quote (twilight-anti-bright)))
 '(custom-safe-themes
   (quote
    ("3c68f48ea735abe65899f489271d11cbebbe87da7483acf9935ea4502efd0117" "b25040da50ef56b81165676fdf1aecab6eb2c928fac8a1861c5e7295d2a8d4dd" "95db78d85e3c0e735da28af774dfa59308db832f84b8a2287586f5b4f21a7a5b" "e6d83e70d2955e374e821e6785cd661ec363091edf56a463d0018dc49fbc92dd" default)))
 '(menu-bar-mode nil)
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("" . "https://stable.melpa.org/packages/"))))
 '(package-selected-packages
   (quote
    (ox-twbs htmlize yaml-mode ess poly-R r-autoyas python paredit geiser multi-term twilight-anti-bright-theme exwm alchemist)))
 '(tool-bar-mode nil))
#+END_SRC
* CUSTOM UI SETTINGS
** customize font size and style
#+BEGIN_SRC emacs-lisp
(custom-set-faces
   ;; '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 105 :width normal :foundry "outline" :family "DejaVu Sans Mono")))))
   '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 105 :width normal :foundry "outline" :family nil)))))
#+END_SRC
* CUSTOM PACKAGES
** SimTalk Mode
   Tell emacs where your persona elisp lib directory is located
#+BEGIN_SRC emacs-lisp
(add-to-list `load-path "~/.emacs.d/lisp/")
#+END_SRC
   Best not to include ending ".el" or ".elc"
#+BEGIN_SRC emacs-lisp
(load "stm-mode")
#+END_SRC

* CUSTOM LANGUAGE SETTINGS
** elixir settings: require alchemist on start-up for elixir
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/alchemist.el/")
(require 'alchemist)
#+END_SRC
** erlang settings:
#+BEGIN_SRC emacs-lisp
;; ;; add the location of the elisp files to the load-path
;; (setq load-path (cons  "/usr/lib/erlang/lib/tools-2.6.13/emacs"
;;          load-path))
;; ;; set the location of the man page hierarchy
;; (setq erlang-root-dir "/usr/lib/erlang")
;; ;; add the home of the erlang binaries to the exec-path
;; (setq exec-path (cons "/usr/lib/bin" exec-path))
;; ;; load and eval the erlang-start package to set up 
;; ;; everything else 
;; (require 'erlang-start)
#+END_SRC
** R settings: set R as program for ess
#+BEGIN_SRC emacs-lisp
(setq inferior-ess-r-program "R")
(add-hook 'ess-mode-hook
          (lambda () 
            (ess-toggle-underscore nil)))
#+END_SRC
** java settings
#+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook (lambda ()
			    (setq c-basic-offset 2
				  tab-width 2
				  indent-tabs-mode t)))
#+END_SRC
** common lisp settings: sbcl
#+BEGIN_SRC emacs-lisp
;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;;(setq inferior-lisp-program "sbcl")
#+END_SRC
** simtalk: setup files ending in ".stm" to open in mystm-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.stm\\'" . mystm-mode))
(when (fboundp 'mystm-mode)

  (defun my-insert-tab-char ()
    "Insert a tab char. (ASCII 9, \t)"
    (interactive)
    (insert "\t"))

  (defun my-tab-config ()
    ;; setup tab char behavior
    (local-set-key (kbd "TAB") 'my-insert-tab-char)  
    )
  
  (add-hook 'mystm-mode-hook 'my-tab-config)
  )
#+END_SRC
* EXTRA KEY BINDINGS
** fill width comment line break
#+BEGIN_SRC emacs-lisp
(defun comment-line-break (&optional arg)
  "Add dashed line break comment"
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg))
  (insert-char ?- 50))
  ;; (insert-char ? 20))
(global-set-key (kbd "C-M-;") `comment-line-break)
#+END_SRC
** fill width comment box
#+BEGIN_SRC emacs-lisp
(defun bjm-comment-box (b e)
  "draw a box comment around the region but arrange for the region to extend to at least the fill column.
place the point after the comment box."
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ? (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))
;; create comment box
(global-set-key (kbd "C-c b b") `bjm-comment-box)
#+END_SRC
** helper used by move-text-* functions
#+BEGIN_SRC emacs-lisp
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg)
          (when (and (eval-when-compile
                       '(and (>= emacs-major-version 24)
                             (>= emacs-minor-version 3)))
                     (< arg 0))
            (forward-line -1)))
        (forward-line -1))
      (move-to-column column t)))))
#+END_SRC
** move line down:  M-S-down
#+BEGIN_SRC emacs-lisp
(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))
(global-set-key [M-S-down] 'move-text-down)
#+END_SRC
** move line up: M-S-up
#+BEGIN_SRC emacs-lisp
(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))
(global-set-key [M-S-up] 'move-text-up)
#+END_SRC
* ORG MODE SETTINGS
** enable org mode and make org mode work with files ending in .org
#+BEGIN_SRC emacs-lisp
;; Enable Org mode
(require 'org)
;; Make Org mode work with files ending in .org
;; (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
;; The above is the default in recent emacs
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(add-hook 'org-mode-hook #'visual-line-mode) ;line wrap
(setq org-hide-leading-stars t)
#+END_SRC
** set directories for ogg agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (append
			(file-expand-wildcards "~/org/*org")))
#+END_SRC
** export html setup
#+BEGIN_SRC emacs-lisp
(setq org-html-htmlize-output-type 'css)
#+END_SRC
** twitter bootstrap
#+BEGIN_SRC emacs-lisp
(require 'ox-twbs)
#+END_SRC
** enable export of latex
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
;; (add-to-list 'org-latex-classes
;;              '("article"
;;                "\\documentclass{article}"
;;                ("\\section{%s}" . "\\section*{%s}")))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("book"
               "\\documentclass{book}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
             )
(put 'downcase-region 'disabled nil)
#+END_SRC
